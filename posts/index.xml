<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:sy="http://purl.org/rss/1.0/modules/syndication/" xmlns:media="http://search.yahoo.com/mrss/"><channel><title>FanHe的博客</title><link>https://fanhestyle.github.io/posts/</link><description>Recent content on FanHe的博客</description><generator>Hugo -- gohugo.io</generator><language>cn</language><managingEditor>hzxaaron@gmail.com (FanHe)</managingEditor><webMaster>hzxaaron@gmail.com (FanHe)</webMaster><copyright>©2022, All Rights Reserved</copyright><lastBuildDate>Wed, 14 Apr 2021 08:24:03 +0800</lastBuildDate><atom:link href="https://fanhestyle.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Go语言项目结构</title><link>https://fanhestyle.github.io/posts/go%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%84%E7%BB%87/</link><pubDate>Thu, 03 Nov 2022 17:47:12 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Thu, 03 Nov 2022 17:47:12 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/go%E9%A1%B9%E7%9B%AE%E7%9A%84%E7%BB%84%E7%BB%87/</guid><description>1. 概述 项目的组织结构是一个工程项目中在设计之初就需要决定的内容，在Go语言中有一些列关于工程代码组织的良好实践，本文列举一些相关的内容，方便</description><dc:creator>FanHe</dc:creator><category>Go</category></item><item><title>Go筛质数</title><link>https://fanhestyle.github.io/posts/go%E6%99%92%E8%B4%A8%E6%95%B0/</link><pubDate>Thu, 03 Nov 2022 16:39:20 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Thu, 03 Nov 2022 16:39:20 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/go%E6%99%92%E8%B4%A8%E6%95%B0/</guid><description>1. 概述 在阅读Go编程语言开发时，发现文中提及一个筛质数的程序，初看感觉很难理解，经过一些分析之后，记录于此 整段代码如下： 1 2 3 4 5 6 7 8 9 10</description><dc:creator>FanHe</dc:creator><category>Go</category></item><item><title>Redis事件处理</title><link>https://fanhestyle.github.io/posts/redis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%860.07/</link><pubDate>Wed, 28 Sep 2022 09:49:20 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Wed, 28 Sep 2022 09:49:20 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/redis%E6%BA%90%E7%A0%81%E8%A7%A3%E6%9E%90-%E4%BA%8B%E4%BB%B6%E5%A4%84%E7%90%860.07/</guid><description>1. 概述 本文主要介绍Redis中的事件处理机制，使用的源码是Redis 0.07，也就是Redis第一个提交的版本 Redis中的事件处理在最初版</description><dc:creator>FanHe</dc:creator><category>Redis源码解析</category></item><item><title>Go-Shadowsocks源码解析2</title><link>https://fanhestyle.github.io/posts/goshadowsocks_003/</link><pubDate>Thu, 22 Sep 2022 07:25:20 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Thu, 22 Sep 2022 07:25:20 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/goshadowsocks_003/</guid><description>1. 概述 本文继续解析源码，解析的源码是 cipher.go文件 Initial commit 443dd019075b8367fd6db8a07d2967ecacbb855a cipher.go cipher.go主要提供一个函数 pickCipher，简单来说就是选择一</description><dc:creator>FanHe</dc:creator><category>GoShadowsocks2</category></item><item><title>Go-Shadowsocks源码解析1</title><link>https://fanhestyle.github.io/posts/goshadowsocks_002/</link><pubDate>Tue, 20 Sep 2022 20:42:20 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Tue, 20 Sep 2022 20:42:20 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/goshadowsocks_002/</guid><description>1. 简介 git提交版本号 443dd019075b8367fd6db8a07d2967ecacbb855a Initial commit 解析文件：main.go 本文件的主要作用是应用程序的入口地址main函数，代码主要是解析用户传入的命令行参数，基</description><dc:creator>FanHe</dc:creator><category>GoShadowsocks2</category></item><item><title>Go-Shadowsocks源码解析0</title><link>https://fanhestyle.github.io/posts/goshadowsocks_001/</link><pubDate>Tue, 20 Sep 2022 20:27:25 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Tue, 20 Sep 2022 20:27:25 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/goshadowsocks_001/</guid><description>0. 缘起 说起学习golang有一段经历简单聊一下，我平常有听podcast的习惯，之前一直对科技类podcast比较感兴趣，偶然间听到了由吴涛</description><dc:creator>FanHe</dc:creator><category>GoShadowsocks2</category></item><item><title>第12课 线程的切换</title><link>https://fanhestyle.github.io/posts/%E7%AC%AC12%E8%AF%BE-%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2/</link><pubDate>Mon, 25 Apr 2022 11:28:01 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Mon, 25 Apr 2022 11:28:01 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/%E7%AC%AC12%E8%AF%BE-%E5%86%85%E6%A0%B8%E7%BA%BF%E7%A8%8B%E5%88%87%E6%8D%A2/</guid><description>1. 概述 本节主要讲述操作系统中线程和进程的实现原理，以及如何进行线程与进程的切换，本节是操作系统中相对比较难的内容，也是操作系统的精髓之一，必</description><dc:creator>FanHe</dc:creator><category>从零打造操作系统</category></item><item><title>第11课 内存管理</title><link>https://fanhestyle.github.io/posts/%E7%AC%AC11%E8%AF%BE-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</link><pubDate>Fri, 22 Apr 2022 09:28:01 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Fri, 22 Apr 2022 09:28:01 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/%E7%AC%AC11%E8%AF%BE-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86/</guid><description>1. 概述 本文主要讲解操作系统中内存的管理方式，内存管理分为物理内存管理和虚拟内存管理，并且需要建立二者之间的关联。 2. 管理框架 总的框架如下所示：</description><dc:creator>FanHe</dc:creator><category>从零打造操作系统</category></item><item><title>第10课 中断和特权级</title><link>https://fanhestyle.github.io/posts/%E7%AC%AC10%E8%AF%BE-%E7%89%B9%E6%9D%83%E7%BA%A7/</link><pubDate>Wed, 20 Apr 2022 14:45:01 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Wed, 20 Apr 2022 14:45:01 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/%E7%AC%AC10%E8%AF%BE-%E7%89%B9%E6%9D%83%E7%BA%A7/</guid><description>1. 概述 本来想将特权级单独来讲解，但是考虑到特权级和中断的关系，因此将二者结合起来讲解，因为中断很大一个原因是我们想通过中断门来实现调用操作系</description><dc:creator>FanHe</dc:creator><category>从零打造操作系统</category></item><item><title>第9课 函数调用</title><link>https://fanhestyle.github.io/posts/%E7%AC%AC9%E8%AF%BE-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</link><pubDate>Wed, 20 Apr 2022 11:07:01 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Wed, 20 Apr 2022 11:07:01 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/%E7%AC%AC9%E8%AF%BE-%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8/</guid><description>1. 概述 本文介绍在汇编语言中的函数调用以及汇编和C的函数调用互操作的一些内容，我们假设C语言和汇编进行相互操作，那么情况有如下几种： C语言调用</description><dc:creator>FanHe</dc:creator><category>从零打造操作系统</category></item><item><title>第8课 加载最简易的内核和ELF文件</title><link>https://fanhestyle.github.io/posts/%E7%AC%AC8%E8%AF%BE-%E5%8A%A0%E8%BD%BD%E6%9C%80%E7%AE%80%E6%98%93%E7%9A%84%E5%86%85%E6%A0%B8/</link><pubDate>Wed, 20 Apr 2022 09:00:01 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Wed, 20 Apr 2022 09:00:01 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/%E7%AC%AC8%E8%AF%BE-%E5%8A%A0%E8%BD%BD%E6%9C%80%E7%AE%80%E6%98%93%E7%9A%84%E5%86%85%E6%A0%B8/</guid><description>1. 概述 本文即将开始加载最简易的内核代码，我们将控制权从Bootloader继续转交给下一棒的操作系统。 我们的操作系统大部分使用C语言来开发，</description><dc:creator>FanHe</dc:creator><category>从零打造操作系统</category></item><item><title>第7课 内存管理之分页机制</title><link>https://fanhestyle.github.io/posts/%E7%AC%AC7%E8%AF%BE-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B9%8B%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6/</link><pubDate>Tue, 19 Apr 2022 09:30:01 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Tue, 19 Apr 2022 09:30:01 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/%E7%AC%AC7%E8%AF%BE-%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86%E4%B9%8B%E5%88%86%E9%A1%B5%E6%9C%BA%E5%88%B6/</guid><description>1. 概述 本文主要讲解一下在x86 32位下的分页内存管理，分页机制使得我们不再直接使用和操作物理内存，而是为每一个任务（进程）分配一个独立4G空</description><dc:creator>FanHe</dc:creator><category>从零打造操作系统</category></item><item><title>第6课 获取物理内存大小</title><link>https://fanhestyle.github.io/posts/%E7%AC%AC6%E8%AF%BE-%E8%8E%B7%E5%8F%96%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F/</link><pubDate>Tue, 19 Apr 2022 08:38:01 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Tue, 19 Apr 2022 08:38:01 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/%E7%AC%AC6%E8%AF%BE-%E8%8E%B7%E5%8F%96%E7%89%A9%E7%90%86%E5%86%85%E5%AD%98%E5%A4%A7%E5%B0%8F/</guid><description>1. 概述 在我们继续迈进内核编程之前，首先需要能获取到当前硬件的一些信息，首要的信息是物理内存的大小，一般来说可以用BIOS中断0x15实现，分</description><dc:creator>FanHe</dc:creator><category>从零打造操作系统</category></item><item><title>第5课 保护模式代码分析</title><link>https://fanhestyle.github.io/posts/%E7%AC%AC5%E8%AF%BE-%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</link><pubDate>Mon, 18 Apr 2022 16:50:01 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Mon, 18 Apr 2022 16:50:01 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/%E7%AC%AC5%E8%AF%BE-%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F%E4%BB%A3%E7%A0%81%E5%88%86%E6%9E%90/</guid><description>1. 概述 本文对保护模式代码进行简要的分析，并给出当前内存中的布局，首先给出保护模式加载的代码 .code16 .include &amp;#34;boot.inc&amp;#34; .section .text LOADER_STACK_TOP = LOADER_BASE_ADDR jmp loader_start GDT_BASE: .long 0x0 .long 0x0 CODE_DESC: .long 0x0000FFFF .long DESC_CODE_HIGH4 DATA_STACK_DESC: .long 0x0000FFFF .long DESC_DATA_HIGH4</description><dc:creator>FanHe</dc:creator><category>从零打造操作系统</category></item><item><title>第4课 进入保护模式</title><link>https://fanhestyle.github.io/posts/%E7%AC%AC4%E8%AF%BE-%E8%BF%9B%E5%85%A5%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/</link><pubDate>Mon, 18 Apr 2022 16:00:21 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Mon, 18 Apr 2022 16:00:21 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/%E7%AC%AC4%E8%AF%BE-%E8%BF%9B%E5%85%A5%E4%BF%9D%E6%8A%A4%E6%A8%A1%E5%BC%8F/</guid><description>1. 概述 本文开始从实模式进入到保护模式，实模式是指老式的兼容8086的模式，在实模式下各种寄存器的宽度是16位的，程序寻址内存的时候采用的是段</description><dc:creator>FanHe</dc:creator><category>从零打造操作系统</category></item><item><title>第3课 接力第二棒Bootloader</title><link>https://fanhestyle.github.io/posts/%E7%AC%AC3%E8%AF%BE-%E6%8E%A5%E5%8A%9B%E7%AC%AC%E4%BA%8C%E6%A3%92bootloader/</link><pubDate>Mon, 18 Apr 2022 13:53:28 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Mon, 18 Apr 2022 13:53:28 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/%E7%AC%AC3%E8%AF%BE-%E6%8E%A5%E5%8A%9B%E7%AC%AC%E4%BA%8C%E6%A3%92bootloader/</guid><description>1. 概述 本文开始从MBR进入到第二棒Bootloader，为操作系统的加载做准备 2. Bootloader 操作系统开发中第一棒是从BIOS进入到MBR，在MBR中只</description><dc:creator>FanHe</dc:creator><category>从零打造操作系统</category></item><item><title>第2课 完善MBR并使用显存</title><link>https://fanhestyle.github.io/posts/%E7%AC%AC2%E8%AF%BE-%E5%AE%8C%E5%96%84mbr%E4%BD%BF%E7%94%A8%E6%98%BE%E5%AD%98/</link><pubDate>Mon, 18 Apr 2022 11:09:28 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Mon, 18 Apr 2022 11:09:28 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/%E7%AC%AC2%E8%AF%BE-%E5%AE%8C%E5%96%84mbr%E4%BD%BF%E7%94%A8%E6%98%BE%E5%AD%98/</guid><description>1. 概述 本文完善之前编写的MBR，使用操作显存的方式来输出字符 2. 实模式下的内存布局 实模式下我们使用的内存是1MB的内存空间，这是从8086继承</description><dc:creator>FanHe</dc:creator><category>从零打造操作系统</category></item><item><title>第1课 初识MBR程序HelloWorld</title><link>https://fanhestyle.github.io/posts/%E7%AC%AC1%E8%AF%BE-%E5%88%9D%E8%AF%86mbr%E7%A8%8B%E5%BA%8Fhelloworld/</link><pubDate>Mon, 18 Apr 2022 09:50:25 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Mon, 18 Apr 2022 09:50:25 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/%E7%AC%AC1%E8%AF%BE-%E5%88%9D%E8%AF%86mbr%E7%A8%8B%E5%BA%8Fhelloworld/</guid><description>1. 概述 从本文开始我们正式开始编码的工作，首先是所有学习语言的第一个程序”Hello,World&amp;quot; 2. MBR简介 主引导记录（Maste</description><dc:creator>FanHe</dc:creator><category>从零打造操作系统</category></item><item><title>第0课 开发环境搭建</title><link>https://fanhestyle.github.io/posts/%E7%AC%AC0%E8%AF%BE-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</link><pubDate>Mon, 18 Apr 2022 09:12:25 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Mon, 18 Apr 2022 09:12:25 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/%E7%AC%AC0%E8%AF%BE-%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</guid><description>1. 概述 本文主要介绍任何搭建开发环境，个人使用的开发环境如下： macOS 12.3.1 Monterey Bochs 2.7 Apple clang version 13.0.0 (clang-1300.0.27.3) 2. 搭建开发环境 安装必要的开发工具集 在MacOS中打开终端，终</description><dc:creator>FanHe</dc:creator><category>从零打造操作系统</category></item><item><title>转圈圈</title><link>https://fanhestyle.github.io/posts/my-first-post/</link><pubDate>Mon, 05 Apr 2021 21:20:55 +0800</pubDate><author>hzxaaron@gmail.com (FanHe)</author><atom:modified>Mon, 05 Apr 2021 21:20:55 +0800</atom:modified><guid>https://fanhestyle.github.io/posts/my-first-post/</guid><description>辗转几次还是回到这里，开始安心写作吧！</description><dc:creator>FanHe</dc:creator><category>生活</category></item></channel></rss>